
ARG GID=998

FROM debian:bookworm AS aktualizr

ENV UPTANE_SIGN_VER=3.2.10

# install essential
RUN apt-get -q -y update && \
    apt-get -q -y install --no-install-recommends \
    ca-certificates \
    wget \
    curl \
    gnupg \
    git \
    pkg-config \
    ostree \
    rsync \
    asn1c \
    build-essential \
    cmake \
    libarchive-dev \
    libboost-dev \
    libboost-log-dev \
    libboost-program-options-dev \
    libcurl4-openssl-dev \
    libpthread-stubs0-dev \
    libsodium-dev \
    libsqlite3-dev \
    python3 \
    python3-requests \
    libglib2.0-dev \
    file \
    libostree-dev \
    libssl-dev \
    openjdk-17-jre-headless \
    lsb-release \
    && apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*


RUN mkdir -p /uptane-sign && \
    cd /uptane-sign && \
    wget https://github.com/uptane/ota-tuf/releases/download/v${UPTANE_SIGN_VER}/cli-3.2.10.tgz


RUN git clone https://github.com/gaiaBuildSystem/aktualizr.git && \
    cd aktualizr && \
    git submodule update --init --recursive && \
    git checkout 29a7d4bd073f762d24cb0968b814dcb488a98847 && \
    mkdir build && \
    cd build && \
    cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_DEB=ON \
    -DBUILD_SOTA_TOOLS=ON \
    -DGARAGE_SIGN_ARCHIVE=/uptane-sign/cli-$UPTANE_SIGN_VER.tgz \
    -DGARAGE_SIGN_TOOL="uptane-sign" \
    -DSOTA_DEBIAN_PACKAGE_DEPENDS=openjdk-17-jre-headless \
    -DBUILD_OSTREE=ON \
    -DWARNING_AS_ERROR=OFF \
    .. && \
    mkdir -p /aktualizr/install-dir && \
    make -j$(nproc) DESTDIR=/aktualizr/install-dir install && \
    tar cjvf aktualizr.tar.bz2 \
        --show-transformed-names --transform="s,^aktualizr/install-dir/,," /aktualizr/install-dir


FROM pergamos/debian:bookworm AS opus

ARG GID

# install essential
RUN apt-get -q -y update && \
    apt-get -q -y install --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    && apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# for install docker
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /etc/apt/keyrings/githubcli-archive-keyring.gpg

RUN echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] \
    https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null

# install required packages
RUN apt-get -q -y update && \
    apt-get -q -y install --no-install-recommends \
    wget \
    git \
    pass \
    sudo \
    python3 \
    python3-pip \
    python3-venv \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-compose-plugin \
    docker-buildx-plugin \
    xz-utils \
    pv \
    mount \
    kpartx \
    e2fsprogs \
    ostree \
    util-linux \
    parted \
    qemu-utils \
    rsync \
    sshpass \
    openssh-client \
    openjdk-17-jre-headless \
    libboost-log1.74.0 \
    libboost-program-options1.74.0 \
    lbzip2 \
    && apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# install aktualizr
RUN --mount=type=bind,from=aktualizr,source=/aktualizr/build/aktualizr.tar.bz2,target=/aktualizr.tar.bz2 \
    tar xvf /aktualizr.tar.bz2 -C / && \
    ldconfig -v

# /project can be mounted as a volume to the PWD of the project on host
COPY . /project

# create a virtual environment & install dependencies
# hadolint ignore=SC1091
RUN cp /project/.devcontainer/wrapper /usr/bin/wrapper && \
    chmod +x /usr/bin/wrapper && \
    touch /root/.xonshrc && \
    python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --no-cache-dir -r /project/.devcontainer/requirements.txt

# create a user
RUN groupmod -g ${GID} docker && \
    usermod -aG docker phobos && \
    echo "phobos ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/pergamos && \
    echo "Defaults !authenticate" > /etc/sudoers.d/99-nopasswd


# set the working directory
WORKDIR /project


# initialize already the virtual environment
ENTRYPOINT [ "wrapper" ]
